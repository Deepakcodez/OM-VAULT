import { z } from 'zod';

export const PurchaseSchema = z.object({
  id: z.string().optional(), // Optional since it's generated by UUID
  productName: z.string().min(1, 'Product Name is required'),
  price: z.number().positive('Price must be greater than 0'),
  quantity: z.number().positive('Quantity must be greater than 0'),
  discount: z.number().min(0, 'Discount cannot be negative').optional(),
  tax: z.number().min(0, 'Tax cannot be negative').optional(),
  supplier: z.string().min(1, 'Supplier is required'),
  supplierContact: z.string().min(1, 'Supplier Contact is required'),
  supplierEmail: z.string().email('Invalid email address'),
  supplierAddress: z.string().min(1, 'Supplier Address is required'),
  shippingAddress: z.string().min(1, 'Shipping Address is required'),
  paymentStatus: z.enum(['paid', 'pending', 'cancelled']),
  paymentMethod: z.enum([
    'cash',
    'cheque',
    'creditCard',
    'bankTransfer',
    'upi',
    'installment',
    'other',
  ]),
  orderingDate: z.string().min(1, 'Ordering Date is required'),
  isInstallment: z.boolean(),
  installments: z
    .array(
      z.object({
        date: z.string(),
        rate: z.number().min(0, 'Installment rate cannot be negative'),
        paymentMethod: z.enum(['cash', 'cheque', 'upi', 'credit']),
      })
    )
    .optional(),
  pending: z.number().min(0, 'Pending amount cannot be negative').optional(),
  totalPrice: z.number().min(0, 'Total price cannot be negative').optional(),
});

export type PurchaseFormData = z.infer<typeof PurchaseSchema>;
